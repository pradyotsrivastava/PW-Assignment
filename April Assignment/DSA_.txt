Problem 1: Print Binary Representation
public class BinaryRepresentation {
    public static void main(String[] args) {
        printBinaryRepresentation(5); // Output: 101
        printBinaryRepresentation(10); // Output: 1010
    }

    static void printBinaryRepresentation(int number) {
        String binary = Integer.toBinaryString(number);
        System.out.println(binary);
    }
}

Problem 2: Check if a Number is a Power of Two
public class PowerOfTwo {
    public static void main(String[] args) {
        System.out.println(isPowerOfTwo(15)); // Output: False
        System.out.println(isPowerOfTwo(32)); // Output: True
    }

    static boolean isPowerOfTwo(int n) {
        return (n > 0) && ((n & (n - 1)) == 0);
    }
}

Problem 3: Check Odd or Even using Bit Manipulation
public class CheckOddEven {
    public static void main(String[] args) {
        checkOddEven(8); // Output: Even
        checkOddEven(3); // Output: Odd
    }

    static void checkOddEven(int number) {
        if ((number & 1) == 0) {
            System.out.println("Even");
        } else {
            System.out.println("Odd");
        }
    }
}

Problem 4: Count Set Bits in a Number
public class CountSetBits {
    public static void main(String[] args) {
        System.out.println(countSetBits(13)); // Output: 3
    }

    static int countSetBits(int number) {
        int count = 0;
        while (number > 0) {
            count += number & 1;
            number >>= 1;
        }
        return count;
    }
}

Problem 5: Find Odd Occurring Element
import java.util.Arrays;

public class OddOccurringElement {
    public static void main(String[] args) {
        int[] arr = {4, 3, 6, 2, 6, 4, 2, 3, 4, 3, 3};
        System.out.println(findOddOccurringElement(arr)); // Output: 4
    }

    static int findOddOccurringElement(int[] arr) {
        int result = 0;
        for (int num : arr) {
            result ^= num; // XOR operation
        }
        return result;
    }
}